1. block transactionHash, receiptHash 계산 방법?

https://github.com/hyperledger/besu/blob/main/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BodyValidation.java#L56

SimpleMerklePatriciaTrie

transactionHash
 - index[0,n)를 key로 MerklePatriciaTrie에 RLP encoding 값을 추가
 - SimpleTrie.put (https://github.com/hyperledger/besu/blob/fd007357cf2576a22e1cced0d2bd5e59be572710/ethereum/trie/src/main/java/org/hyperledger/besu/ethereum/trie/SimpleMerklePatriciaTrie.java#L79)
 - root.accept
 -- PutVisitor
 -- CompactEncoding.bytesToPath(key) (https://github.com/hyperledger/besu/blob/fd007357cf2576a22e1cced0d2bd5e59be572710/ethereum/trie/src/main/java/org/hyperledger/besu/ethereum/trie/CompactEncoding.java#L27)


private static Bytes indexKey(final int i) {
 return RLP.encodeOne(UInt256.valueOf(i).trimLeadingZeros());
}

transactionValue, rlpEncoding of transaction => rawTransaction
https://github.com/hyperledger/besu/blob/main/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/encoding/TransactionEncoder.java#L59

2. logBloom 매핑방법
3. Topic event signature 생성법 확인필요


Contract EVM상 Account Storage 저장 방법
slot -> 0부터 32bytes 기준으로 선언된 순서대로 증가
keccask-256(slot)  => 예) keccak-256(0x0000000000000000000000000000000000000000000000000000000000000000)
mapping(a => b) => keccak-256(a&slot)
mapping(a => mapping(b => c) => keccaks(c & keccak(a & slot)

정적타입 고정길이 배열 : position은 변수당 1, 아이템당 position값 할당
예)
constract {
  uint[3] a = [1,2,3]; => 1,2,3 은 각각 position 0, 1, 2에 저장
}

동적 배열의 slot 에는 length 저장, value는 keccask(keccak(slot) + index) 에 저장됨

string : slot  에는 length 저장
동적 배열과 유사하게 keccak-256(slot) 결과에 index를 더한 값의 hash값 위치에 32bytes 씩 저장,
마지막에 떨어지지않으면 0으로 right pedding

bytes, string  : 0~62 bytes까지는 다른 방식
hash(slot) 에 데이터를 저장 0~63바이트(데이터) 64바이트 : 바이트 길이
hash(hash(slot)) 에는 0 저장

bytes, string => 동일 방법
0~63바이트
""
{
	"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563": {
		"key": "0x0000000000000000000000000000000000000000000000000000000000000000",
		"value": "0x0000000000000000000000000000000000000000000000000000000000000000"
	}
}

"abc"
{
	"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563": {
		"key": "0x0000000000000000000000000000000000000000000000000000000000000000",
		"value": "0x6162630000000000000000000000000000000000000000000000000000000006"
	}
}

64바이트 이상
keccak(slot) => legnth
keccak(keccak(slot)+index) => 64바이트 단위로 저장
마지막에 길이가 안 맞으면 right pedding

길이가 줄어들면 기존에 사용하던 공간은 0으로 설정하여 초기화







0번 slot에 "abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij"
{
	"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563": {
		"key": "0x0000000000000000000000000000000000000000000000000000000000000000",
		"value": "0x00000000000000000000000000000000000000000000000000000000000000dd"
	},
	"0x510e4e770828ddbf7f7b00ab00a9f6adaf81c0dc9cc85f1f8249c256942d61d9": {
		"key": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
		"value": "0x6162636465666768696a6162636465666768696a6162636465666768696a6162"
	},
	"0x6c13d8c1c5df666ea9ca2a428504a3776c8ca01021c3a1524ca7d765f600979a": {
		"key": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564",
		"value": "0x636465666768696a6162636465666768696a6162636465666768696a61626364"
	},
	"0x63d75db57ae45c3799740c3cd8dcee96a498324843d79ae390adc81d74b52f13": {
		"key": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565",
		"value": "0x65666768696a6162636465666768696a6162636465666768696a616263646566"
	},
	"0x68ebfc8da80bd809b12832608f406ef96007b3a567d97edcfc62f0f6f6a6d8fa": {
		"key": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e566",
		"value": "0x6768696a6162636465666768696a000000000000000000000000000000000000"
	}
}



WorldState에 저장?
hash({contractAddress + slot})? => 확인 필요



Storage 위치 확인
keccak(decodeHex("000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298" + "0000000000000000000000000000000000000000000000000000000000000001"))